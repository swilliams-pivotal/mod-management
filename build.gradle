/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
  }
  dependencies {
    classpath "org.vert-x:gradle-plugin:1.3.0-SNAPSHOT"
  }
}

apply from: 'gradle/setup.gradle'

subprojects {
  apply plugin: 'vertx'

  defaultTasks = ['assemble']

  sourceCompatibility = '1.7'
  targetCompatibility = '1.7'

  repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'http://repo.springsource.org/release' }
    mavenCentral()
  }

  javadoc.classpath += configurations.vertxProvided
  jar.enabled = false

  dependencies {
    vertxProvided "org.vert-x:vertx-core:$vertxVersion"
    vertxProvided "org.vert-x:vertx-platform:$vertxVersion"

    testCompile "junit:junit:$junitVersion"

    testCompile "org.vert-x:vertx-junit-annotations:$junitAnnoVersion"
    testCompile "org.vert-x:vertx-lang-java:$vertxVersion"
    testCompile "org.vert-x:vertx-lang-rhino:$vertxVersion"
    testCompile "org.vert-x:vertx-lang-groovy:$vertxVersion"

    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
    testCompile "org.mozilla:rhino:$rhinoVersion"
  }
}


// --------------------------------------------------------------------
// global task definitions

task assembleAll(type: Sync, dependsOn: subprojects.assemble) {
  destinationDir = file("build/vertx.management-v$version")
  into("build/vertx.management-v$version/mods") {
    subprojects.each { p->
      from "${p.buildDir}/mod"
    }
  }
  from 'src/main/conf'
  from 'src/main/resources'
}

task cleanAll(dependsOn: subprojects.clean) {
  //
}

task testAll(dependsOn: subprojects.test) {
  //
}

task vertxIntegAll(dependsOn: subprojects.vertxInteg) {
//
}


task assemble(type: Sync, dependsOn: subprojects.assemble) {
  destinationDir = file("build/vertx.management-v$version")
  into("build/vertx.management-v$version/mods") {
    subprojects.each { p->
      from "${p.buildDir}/mod"
    }
  }
  from 'src/main/conf'
  from 'src/main/resources'
}

// --------------------------------------------------------------------
// Sub projects

project(":mod-management-common") {
  dependencies {
      // project dependencies
  }
}

project(":mod-management-agent") {
  dependencies {
    compile project(":mod-management-common")
  }
}

project(":mod-management-api") {
  dependencies {
    compile project(":mod-management-common")
  }
}

project(":mod-management-gui") {
  dependencies {
    compile project(":mod-management-common")
  }
}

project(":mod-management-monitor") {
  dependencies {
    compile project(":mod-management-common")
  }
}

project(":mod-management-collector") {
  dependencies {
    compile project(":mod-management-common")
  }
}
